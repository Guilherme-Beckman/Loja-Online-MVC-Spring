package com.beckman.lojaonline.services;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;

import com.beckman.lojaonline.domain.cart.Cart;
import com.beckman.lojaonline.domain.cart.exceptions.IdNotValidException;
import com.beckman.lojaonline.domain.cartitem.CartItem;
import com.beckman.lojaonline.domain.product.Product;
import com.beckman.lojaonline.domain.product.exceptions.ProductNotFoundException;
import com.beckman.lojaonline.repositories.CartItemRepository;
import com.beckman.lojaonline.repositories.CartRepository;
import com.beckman.lojaonline.repositories.ProductRepository;

import jakarta.transaction.Transactional;
@DataJpaTest
@ActiveProfiles("test")
class CartServiceTest {
	@Mock
	CartRepository repository;
	@Autowired
CartItemRepository itemRepository;
	@Mock
	ProductRepository productRepository;
//Adicionar produtos no carrinho * 
//Modificar quantidade de itens
//Deletar itens do carrinho
//Pegar todos os produtos do carrinho

	@Test
	@DisplayName("Should insert a item in a cart")
	void testAddItenToCart() {
		
		Cart newCart = new Cart();
		Product productTest = new Product( "ProductTest", 122, "A cool product");
		productTest.setId(1L);
		when(productRepository.findById(1L)).thenReturn(Optional.of(productTest));
		when(repository.findById((1L))).thenReturn(Optional.of(newCart));
		CartItem result = this.addItenOnCart(1L, 1L);
		Optional<CartItem> addedItem = this.itemRepository.findById(1L);
		assertThat(addedItem).isPresent();
		
	}

//---------------------------------------Services--------------------------------------//
	@Transactional
	public CartItem addItenOnCart (Long cartId, Long productId) {
		if (cartId !=null && cartId != 0 && productId !=null && productId != 0) {
		var cartItem = this.itemRepository.findById(productId);
		if(cartItem.isPresent() != true) {
		Cart cart = repository.findById(cartId).orElseThrow(ProductNotFoundException::new);
		Product product = productRepository.findById(productId).orElseThrow(ProductNotFoundException::new);
		CartItem item = new CartItem();
		item.setCart(cart);
		item.setId(productId);
		item.setName(product.getName());
		item.setPrice(product.getPrice());
		item.setDescription(product.getDescription());
		item.setRating(product.getRating());
		item.setQuantity(1);
		List<CartItem> itens = cart.getItens();
		itens.add(item);
		cart.setItens(itens);
		this.itemRepository.save(item);
		return item;
		}else {
			cartItem.get().setQuantity(cartItem.get().getQuantity()+1);
			return cartItem.get();
		}
		}else throw new IdNotValidException();
	}
}
